---
title: "Project 1"
author: "Miguel Desmarais (21421145)"
date: '2018-03-12'
output: html_document
---

RESULTS (Rmd -results stuff)

Libraries used
```{r eval=TRUE, message=FALSE, warning=FALSE}
library(tidyverse)
library(phyloseq)
library(ggplot2)
library(dplyr)
library(stringr)
library(magrittr)
library(knitr)
```

### Data cleaning

Data were loaded into R and samples normalized to 100,000 sequences per sample. Reproducibility was kept by setting a random seed.  
```{r eval=TRUE, message=FALSE, warning=FALSE}
load("mothur_phyloseq.RData")
load("qiime2_phyloseq.RData")

set.seed(4831)
m.norm = rarefy_even_depth(mothur, sample.size=100000)
q.norm = rarefy_even_depth(qiime2, sample.size=100000)
```

Relative abundance percentages were calculated for the data.
```{r eval=TRUE}
m.percent = transform_sample_counts(m.norm, function(x) 100 * x/sum(x))
q.percent = transform_sample_counts(q.norm, function(x) 100 * x/sum(x))

phylum_name_mothur = "Chloroflexi"
phylum_name_qiime2 = "D_1__Chloroflexi"
```

#### Microbial community structure change with depth and oxygen concentration
##### Alpha-diversity
Mothur
```{r eval=TRUE}
# Alpha-diversity of whole (mothur)
m.alpha = estimate_richness(m.norm, measures = c("Chao1", "Shannon"))

m.meta.alpha = full_join(rownames_to_column(m.alpha),
  rownames_to_column(data.frame(m.percent@sam_data)), by = "rowname")

m.meta.alpha %>% 
  ggplot() +
    geom_point(aes(x=Depth_m, y=Shannon)) +
    geom_smooth(method='auto', aes(x=as.numeric(Depth_m), y=Shannon)) +
    labs(title="Alpha-diversity across depth for mothur", y="Shannon's diversity index", x="Depth (m)")

m.meta.alpha %>% 
  ggplot() +
    geom_point(aes(x=Depth_m, y=Chao1)) +
    geom_smooth(method='auto', aes(x=as.numeric(Depth_m), y=Chao1)) +
    labs(title="Chao1 across depth for mothur", y="Chao1 richness estimator", x="Depth (m)")

m.meta.alpha %>% 
  ggplot() +
    geom_point(aes(x=O2_uM, y=Shannon)) +
    labs(title="Alpha-diversity across oxygen concentration for mothur", y="Shannon's diversity index", x="Oxygen (uM)")

```

Qiime2
```{r eval=TRUE}
# Alpha-diversity of whole (qiime2)
q.alpha = estimate_richness(q.norm, measures = c("Chao1", "Shannon"))

q.meta.alpha = full_join(rownames_to_column(q.alpha),
  rownames_to_column(data.frame(q.percent@sam_data)), by = "rowname")

q.meta.alpha %>% 
  ggplot() +
    geom_point(aes(x=Depth_m, y=Shannon)) +
    geom_smooth(method='auto', aes(x=as.numeric(Depth_m), y=Shannon)) +
    labs(title="Alpha-diversity across depth for qiime2", y="Shannon's diversity index", x="Depth (m)")

q.meta.alpha %>% 
  ggplot() +
    geom_point(aes(x=Depth_m, y=Chao1)) +
    geom_smooth(method='auto', aes(x=as.numeric(Depth_m), y=Chao1)) +
    labs(title="Chao1 across depth for qiime2", y="Chao1 richness estimator", x="Depth (m)")

q.meta.alpha %>% 
  ggplot() +
    geom_point(aes(x=O2_uM, y=Shannon)) +
    labs(title="Alpha-diversity across oxygen concentration for qiime2", y="Shannon's diversity index", x="Oxygen (uM)")

```

##### Taxa presence and abundance
Mothur
```{r eval=TRUE}
# Taxa abundance
m.percent %>%
  plot_bar(fill="Phylum")+
  geom_bar(aes(fill=Phylum), stat="identity")+
  labs(title="Phyla across samples for mothur")

```

Qiime2
```{r eval=TRUE}
# Taxa abundance
q.percent %>%
  plot_bar(fill="Phylum")+
    geom_bar(aes(fill=Phylum), stat="identity")+
    labs(title="Phyla across samples for qiime2")
```

Mothur
```{r eval=TRUE}

# Significance depth
m.norm %>% 
  subset_taxa(Phylum==phylum_name_mothur) %>% 
  tax_glom(taxrank = 'Phylum') %>%
  psmelt() %>%
  lm(Abundance ~ Depth_m, .) %>% 
  summary()

m.percent %>% 
  subset_taxa(Phylum==phylum_name_mothur) %>% 
  psmelt() %>% 
  group_by(Sample) %>% 
  summarize(Abundance_sum=sum(Abundance), Depth_m=mean(Depth_m)) %>% 
  
ggplot() +
  geom_point(aes(x=Depth_m, y=Abundance_sum)) +
  geom_smooth(method='lm', aes(x=as.numeric(Depth_m), y=Abundance_sum)) +
  labs(title="Abundance unclassified domain across depth")

# Significance oxygen
print(phylum_name_mothur)
m.norm %>% 
  subset_taxa(Phylum==phylum_name_mothur) %>% 
  tax_glom(taxrank = 'Phylum') %>%
  psmelt() %>%
  lm(Abundance ~ O2_uM, .) %>% 
  summary()

m.percent %>% 
  subset_taxa(Phylum==phylum_name_mothur) %>% 
  psmelt() %>% 
  group_by(Sample) %>% 
  summarize(Abundance_sum=sum(Abundance), O2_uM=mean(O2_uM)) %>% 
  
ggplot() +
  geom_point(aes(x=O2_uM, y=Abundance_sum)) +
  geom_smooth(method='lm', aes(x=as.numeric(O2_uM), y=Abundance_sum)) +
  labs(title="Abundance unclassified domain across oxygen concentration")

```
Qiime2
```{r eval=TRUE}

# Significance depth
q.norm %>% 
  subset_taxa(Phylum==phylum_name_qiime2) %>% 
  tax_glom(taxrank = 'Phylum') %>%
  psmelt() %>%
  lm(Abundance ~ Depth_m, .) %>% 
  summary()

q.percent %>% 
  subset_taxa(Phylum==phylum_name_qiime2) %>% 
  psmelt() %>% 
  group_by(Sample) %>% 
  summarize(Abundance_sum=sum(Abundance), Depth_m=mean(Depth_m)) %>% 
  
ggplot() +
  geom_point(aes(x=Depth_m, y=Abundance_sum)) +
  geom_smooth(method='lm', aes(x=as.numeric(Depth_m), y=Abundance_sum)) +
  labs(title="Abundance unclassified domain across depth")

# Significance oxygen
q.norm %>% 
  subset_taxa(Phylum==phylum_name_qiime2) %>% 
  tax_glom(taxrank = 'Phylum') %>%
  psmelt() %>%
  lm(Abundance ~ O2_uM, .) %>% 
  summary()

q.percent %>% 
  subset_taxa(Phylum==phylum_name_qiime2) %>% 
  psmelt() %>% 
  group_by(Sample) %>% 
  summarize(Abundance_sum=sum(Abundance), O2_uM=mean(O2_uM)) %>% 
  
ggplot() +
  geom_point(aes(x=O2_uM, y=Abundance_sum)) +
  geom_smooth(method='lm', aes(x=as.numeric(O2_uM), y=Abundance_sum)) +
  labs(title="Abundance unclassified domain across oxygen concentration")
```


#### Within your taxon, what is the richness (number of OTUs/ASVs)?
```{r eval=TRUE}
# Number of OTUs
m.chlor_subset = m.norm %>%
  subset_taxa(Phylum==phylum_name_mothur) %>% 
  estimate_richness(measures = c("Observed"))
# Different way to get number of OTUs
m.tax_table = data.frame(m.norm@tax_table)
m.filtered = m.tax_table %>% 
  rownames_to_column('OTU') %>%
  filter(Phylum==phylum_name_mothur) %>%
  column_to_rownames('OTU')
# Number of ASVs
q.chlor_subset = q.norm %>%
  subset_taxa(Phylum==phylum_name_qiime2) %>% 
  estimate_richness(measures = c("Observed"))
# Different way to get number of ASVs
q.tax_table = data.frame(q.norm@tax_table)
q.filtered = q.tax_table %>% 
  rownames_to_column('ASV') %>%
  filter(Phylum==phylum_name_qiime2) %>%
  column_to_rownames('ASV')
```

#### Do the abundances of OTUs/ASVs within your taxon of interest change significantly with depth and/or oxygen concentration?

```{r}
m.percent %>% 
  subset_taxa(Phylum==phylum_name_mothur) %>% 
  psmelt() %>% 
  
  ggplot() +
  geom_point(aes(x=Depth_m, y=Abundance)) +
  geom_smooth(method='lm', aes(x=Depth_m, y=Abundance)) +
  facet_wrap(~OTU, scales="free_y") +
  labs(title="Abundance of Chloroflexi OTUs across depth")
```

```{r}
q.percent %>% 
  subset_taxa(Phylum==phylum_name_qiime2) %>% 
  psmelt() %>% 
  
  ggplot() +
  geom_point(aes(x=Depth_m, y=Abundance)) +
  geom_smooth(method='lm', aes(x=Depth_m, y=Abundance)) +
  facet_wrap(~OTU, scales="free_y") +
  labs(title="Abundance of Chloroflexi ASVs across depth")
```

```{r}
m.percent %>% 
  subset_taxa(Phylum==phylum_name_mothur) %>% 
  psmelt() %>% 
  
  ggplot() +
  geom_point(aes(x=O2_uM, y=Abundance)) +
  geom_smooth(method='lm', aes(x=O2_uM, y=Abundance)) +
  facet_wrap(~OTU, scales="free_y") +
  labs(title="Abundance of Chloroflexi OTUs across O2 levels")
```

```{r}
q.percent %>% 
  subset_taxa(Phylum==phylum_name_qiime2) %>% 
  psmelt() %>% 
  
  ggplot() +
  geom_point(aes(x=O2_uM, y=Abundance)) +
  geom_smooth(method='lm', aes(x=O2_uM, y=Abundance)) +
  facet_wrap(~OTU, scales="free_y") +
  labs(title="Abundance of Chloroflexi ASVs across O2 levels")
```

#### Are the answers to the above the same using mothur and QIIME2 processed data?

### Appendix:

```{r}
# Remove the otu_stats object so upon rerunning doesn’t add to existing object
rm(otu_stats)
# Create new data frame
otu_stats = data.frame("Estimate" = numeric(0), "Std. Error"= numeric(0),"t value"= numeric(0),"Pr(>|t|)"= numeric(0))
for (otu in row.names(m.filtered)){
  linear_fit = m.norm %>% 
    psmelt() %>% 
    filter(OTU==otu) %>% 

    lm(Abundance ~ Depth_m, .) %>% 
    summary()
  otu_data = linear_fit$coefficients["Depth_m",]
  otu_stats <- rbind(otu_stats, otu_data)
}
colnames(otu_stats)<- (c("Estimate", "Std. Error","t value","Pr(>|t|)"))
row.names(otu_stats) <- row.names(m.filtered)
kable(otu_stats,caption="Correlation data of Chloroflexi OTUs with depth")
```

```{r, include=FALSE}
# Remove the asv_stats object so upon rerunning doesn’t add to existing object
rm(asv_stats)
# Create new data frame
asv_stats = data.frame("Estimate" = numeric(0), "Std. Error"= numeric(0),"t value"= numeric(0),"Pr(>|t|)"= numeric(0))
for (otu in row.names(q.filtered)){
  linear_fit = q.norm %>% 
    psmelt() %>% 
    filter(OTU==otu) %>% 

    lm(Abundance ~ Depth_m, .) %>% 
    summary()
  asv_data = linear_fit$coefficients["Depth_m",]
  asv_stats <- rbind(asv_stats, asv_data)
}
colnames(asv_stats)<- (c("Estimate", "Std. Error","t value","Pr(>|t|)"))
row.names(asv_stats) <- row.names(q.filtered)
kable(asv_stats,caption="Correlation data of Chloroflexi ASVs with depth")
```

```{r, include=FALSE}
# Remove the otu_stats object so upon rerunning doesn’t add to existing object
rm(otu_stats)
# Create new data frame
otu_stats = data.frame("Estimate" = numeric(0), "Std. Error"= numeric(0),"t value"= numeric(0),"Pr(>|t|)"= numeric(0))
for (otu in row.names(m.filtered)){
  linear_fit = m.norm %>% 
    psmelt() %>% 
    filter(OTU==otu) %>% 

    lm(Abundance ~ O2_uM, .) %>% 
    summary()
  otu_data = linear_fit$coefficients["O2_uM",]
  otu_stats <- rbind(otu_stats, otu_data)
}
colnames(otu_stats)<- (c("Estimate", "Std. Error","t value","Pr(>|t|)"))
row.names(otu_stats) <- row.names(m.filtered)
kable(otu_stats,caption="Correlation Chloroflexi OTUs with O2 levels")
```

```{r, include=FALSE}
# Remove the asv_stats object so upon rerunning doesn’t add to existing object
rm(asv_stats)
# Create new data frame
asv_stats = data.frame("Estimate" = numeric(0), "Std. Error"= numeric(0),"t value"= numeric(0),"Pr(>|t|)"= numeric(0))
for (otu in row.names(q.filtered)){
  linear_fit = q.norm %>% 
    psmelt() %>% 
    filter(OTU==otu) %>% 

    lm(Abundance ~ O2_uM, .) %>% 
    summary()
  asv_data = linear_fit$coefficients["O2_uM",]
  asv_stats <- rbind(asv_stats, asv_data)
}
colnames(asv_stats)<- (c("Estimate", "Std. Error","t value","Pr(>|t|)"))
row.names(asv_stats) <- row.names(q.filtered)
kable(asv_stats,caption="Correlation data of Chloroflexi ASVs with O2 levels")
```


